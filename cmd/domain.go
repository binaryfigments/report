package cmd

import (
	"fmt"
	"html/template"
	"os"
	"time"

	pkicaa "github.com/binaryfigments/caa"
	"github.com/binaryfigments/crtsh"
	"github.com/binaryfigments/dnssec"
	"github.com/binaryfigments/emaildefense"
	"github.com/binaryfigments/httpheaders"
	"github.com/binaryfigments/httpredirects"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

func init() {
	rootCmd.AddCommand(domainCmd)
	domainCmd.Flags().String("domain", "example.com", "the domain to report")
}

type domainReportData struct {
	PageTitle string
	Time      time.Time
	Reporter  string
	Redirects *httpredirects.Data
	Email     *emaildefense.Data
	DNSSEC    *dnssec.Data
	CAA       *pkicaa.CAAdata
	CRTSH     *crtsh.Data
	Headers   httpheaders.Data
}

var domainCmd = &cobra.Command{
	Use:   "domain",
	Short: "Generate a report about a domains.",
	Run: func(cmd *cobra.Command, args []string) {
		domain, _ := cmd.Flags().GetString("domain")

		path := viper.GetString("report_path")

		if _, err := os.Stat(path); os.IsNotExist(err) {
			os.Mkdir(path, 0700)
		}

		tmpl, err := template.ParseFiles("./templates/domain.html")

		fmt.Printf("[*] Start research on domain %s\n", domain)

		now := time.Now()

		fmt.Printf("[*] Start time:  %s\n", now)

		reporter := viper.GetString("reporter")
		fmt.Printf("[*] Report generated by:  %s\n", reporter)

		filename := buildFileName(domain)

		outfile, err := os.Create(path + "/" + filename)
		if err != nil {
			panic(err)
		}
		defer outfile.Close()

		fmt.Printf("[*] Output file is:  %s\n", filename)

		redirects := httpredirects.Get("http://"+domain, viper.GetString("nameserver"))
		email := emaildefense.Get(domain, viper.GetString("nameserver"), false)
		dnssec := dnssec.Get(domain, viper.GetString("nameserver"))
		caa := pkicaa.Get(domain, viper.GetString("nameserver"), true)

		timeout := time.Duration(2) * time.Second
		crts := crtsh.Get(domain, timeout, 30)

		headers := httpheaders.Get("http://"+domain, true)

		data := domainReportData{
			PageTitle: "Domain report: " + domain,
			Reporter:  reporter,
			Time:      now,
			Redirects: redirects,
			Email:     email,
			DNSSEC:    dnssec,
			CAA:       caa,
			CRTSH:     crts,
			Headers:   headers,
		}

		err = tmpl.Execute(outfile, data)
		if err != nil {
			panic(err)
		}
	},
}

func buildFileName(domain string) string {
	return time.Now().Format("20060102150405") + "_" + domain + ".html"
}
